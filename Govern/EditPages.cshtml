@{
    Layout = "_Admin.cshtml";
    MvcXmlEntities ConnXml = new MvcXmlEntities();
    Setting Setting = ConnXml.Setting.FirstOrDefault();
    Login AdminLogin = new Login();
    #region degiskenler
    var drpParentID = "0";
    var drpFAQCategoryID = "0";
    var txtDisplayName = "";
    var txtSubTitle = "";
    var txtPageTitle = "";
    var txtKeywords = "";
    var txtDescription = "";
    var txtShortContent = "";
    var txtContent = "";
    var fuImageUrl = "";
    var txtExternalUrl = "";
    var drpExtarnalLink = "0";
    var drpMainMenu = "0";
    var drpFormMenu = "0";
    var drpModule = "0";
    var txtControlParameter = "";
    var chckShowHeaderTopMenu = "";
    var chckShowHeaderMenu = "";
    var chckShowFooterMenu = "";
    var lstPhotoGalery = "0";
    var lstVideoGalery = "0";
    var lstDocGalery = "0";
    var drpPageTarget = "_self";
    var drpPageType = "0";
    var txtRel = "";
    var drpLang = "0";
    bool drpPageStatus = true;
    bool drpShowBoxModel = false;
    var txtRawUrl = "";
    var btnName = "Kaydet";
    var txtPageTitlee = "Yeni Sayfa Ekle";
    #endregion
    if (Request.QueryString["ParentID"].IsInt())
    {
        drpParentID = Request.QueryString["ParentID"];
    }
    if (Request.QueryString["Lang"].IsInt())
    {
        drpLang = Request.QueryString["Lang"];
    }
    if (Request.QueryString["ID"].IsInt() || Request.QueryString["Reference"].IsInt() || Request.QueryString["HistoryID"].IsInt())
    {
        int reqID = (Request.QueryString["ID"].AsInt() != 0 ? Request.QueryString["ID"].AsInt() : Request.QueryString["Reference"].AsInt());
        int historyID = (Request.QueryString["HistoryID"].AsInt());
        Pages reqPage = ConnXml.Pages.FirstOrDefault(x => x.PageID == reqID);
        if (reqID > 0)
        {
            reqPage = ConnXml.Pages.FirstOrDefault(x => x.PageID == reqID);
        }
        else if (historyID > 0)
        {
            reqPage = ConnXml.PagesHistory.FirstOrDefault(x => x.PageHistoryID == historyID).Cast<Pages>();
            btnName = "Geçmişe Dön";
            txtPageTitlee = reqPage.Title + " adlı menü'nün " + reqPage.ModifiedDate + " tarihinde kaydedilen versiyonu. (Geçmişe dönmeden düzenleme yapamazsınız)";
        }
        drpParentID = reqPage.ParentID.ToString();
        drpFAQCategoryID = reqPage.FAQCatergoryID.ToString();
        txtDisplayName = reqPage.DisplayName;
        txtSubTitle = reqPage.SubTitle;
        txtPageTitle = reqPage.Title;
        txtKeywords = reqPage.Keywords;
        txtDescription = reqPage.Description;
        txtShortContent = reqPage.ShortContent;
        txtExternalUrl = reqPage.ExternalUrl;
        txtContent = reqPage.Body;
        drpExtarnalLink = (reqPage.ExtarnalLink.IsEmpty() == true ? "0" : reqPage.ExtarnalLink);
        if (!reqPage.ImageUrl.IsEmpty())
        {
            string imgDir = "~/" + Setting.Documentdir + "/Pages/" + reqPage.ImageUrl;
            if (System.IO.File.Exists(Server.MapPath(imgDir)))
            {
                fuImageUrl = "<div class=\"Input\"><span>(<a href='" + imgDir.Replace("~/", "../") + "' target='_blank'>Mevcut resim</a> - <a class='DeleteFile' rel='" + reqPage.PageID + "'  type='PagesImageUrl' href='javascript:void(0)' target='_blank'>Resmi Sil</a>)</span></div>";
            }
        }
        drpMainMenu = reqPage.Menu.ToString();
        drpFormMenu = reqPage.FormID.ToString();
        drpModule = reqPage.ModuleID.ToString();
        txtControlParameter = reqPage.ControlParameter;
        chckShowHeaderTopMenu = reqPage.ShowHeaderTopMenu.ToString();
        chckShowHeaderMenu = reqPage.ShowHeaderMenu.ToString();
        chckShowFooterMenu = reqPage.ShowFooterMenu.ToString();
        lstPhotoGalery = reqPage.PhotoGaleries;
        lstVideoGalery = reqPage.VideoGaleries;
        lstDocGalery = reqPage.DocumentGaleries;
        drpPageTarget = reqPage.Target;
        drpPageType = reqPage.PageType.ToString();
        txtRel = reqPage.rel;
        drpLang = reqPage.Lang.ToString();
        drpPageStatus = reqPage.Status;
        drpShowBoxModel = reqPage.ShowBoxModel;
        txtRawUrl = reqPage.RawUrl;
    }
    if (Request.QueryString["Delete"].IsInt())
    {
        int reqID = Request.QueryString["Delete"].AsInt();
        Pages Pages = ConnXml.Pages.FirstOrDefault(x => x.PageID == reqID);
        if (!Pages.Locked)
        {
            string imgDir = "~/" + Setting.Documentdir + "/Pages/" + Pages.ImageUrl;
            if (System.IO.File.Exists(Server.MapPath(imgDir)) && !Pages.ImageUrl.IsEmpty())
            {
                System.IO.File.Delete(Server.MapPath(imgDir));
            }
            ConnXml.Entry(Pages).State = System.Data.EntityState.Deleted;
            int ConnStatus = 0;
            ConnStatus = ConnXml.SaveChanges();
            if (ConnStatus > 0)
            {
                Session["Ok"] = "İşlem başarı ile gerçekleşmiştir.";
            }
            else
            {
                Session["Error"] = "Bir problem oldu yönetici ile görüşün.";
            }
        }
        else
        {
            Session["Warning"] = "Bu sayfa silinmeye karşı korumalı!";
        }
        Response.Redirect("Pages");
    }
    if (IsPost)
    {
        if (!AdminLogin.IsLogin())
        {
            Response.Redirect(Shared.PageBasePath() + "Govern/Login");
        }
        // AntiForgery.Validate();
        Pages Pages = new Pages();
        PagesHistory backup = new PagesHistory();
        if (Request.QueryString["ID"].IsInt() || Request.QueryString["HistoryID"].IsInt())
        {
            int reqID = Request.QueryString["ID"].AsInt();
            Pages = ConnXml.Pages.FirstOrDefault(x => x.PageID == reqID);
            string strPageFormat = Shared.PageTypeUrl[Pages.PageType];
            Pages.LinkUrl = strPageFormat + "/" + reqID + "?lang=" + Request.Form["drpLang"].AsInt();
            int historyID = (Request.QueryString["HistoryID"].AsInt());
            if (reqID > 0)
            {
                Pages = ConnXml.Pages.FirstOrDefault(x => x.PageID == reqID);
                backup = Pages.Cast<PagesHistory>();
            }
            else if (historyID > 0)
            {
                Pages = ConnXml.PagesHistory.FirstOrDefault(x => x.PageHistoryID == historyID).Cast<Pages>();
                backup = Pages.Cast<PagesHistory>();
            }
            Pages.ModifiedDate = DateTime.Now;
            Pages.ModifiedId = AdminLogin.LoginUserID();
            backup.ModifiedId = AdminLogin.LoginUserID();
        }
        else
        {
            Pages.Line = 0;
            Pages.CreatedDate = DateTime.Now;
            Pages.ModifiedDate = DateTime.Now;
            Pages.CreatedId = AdminLogin.LoginUserID();
            Pages.ImageUrl = "";
        }
        Pages.Locked = false;
        Pages.ParentID = Request.Form["drpParentID"].AsInt();
        Pages.FAQCatergoryID = Request.Form["drpFAQCatergoryID"].AsInt();
        Pages.DisplayName = Request.Form["txtDisplayName"];
        Pages.SubTitle = Request.Form["txtSubTitle"];
        Pages.Title = Request.Form["txtPageTitle"];
        Pages.Keywords = Request.Form["txtKeywords"];
        Pages.Description = Request.Form["txtDescription"];
        Pages.ShortContent = Request.Form["txtShortContent"];
        Pages.ExternalUrl = Request.Form["txtExternalUrl"];
        Pages.Body = Request.Unvalidated().Form["txtContent"];
        if (Request.Files.Count > 0)
        {
            var uploadedFile = Request.Files["fuImageUrl"];
            if (uploadedFile.ContentLength > 0)
            {
                if (!Pages.ImageUrl.IsEmpty())
                {
                    string imgDir = "~/" + Setting.Documentdir + "/Pages/" + Pages.ImageUrl;
                    System.IO.File.Delete(Server.MapPath(imgDir));
                }
                string getExtentions = Path.GetExtension(uploadedFile.FileName);
                string newFileName = System.Guid.NewGuid().ToString() + getExtentions;
                var fileSavePath = Server.MapPath("~/" + Setting.Documentdir + "/Pages/" + newFileName);
                uploadedFile.SaveAs(fileSavePath);
                Pages.ImageUrl = newFileName;
            }
        }
        Pages.ExtarnalLink = Request.Form["drpExtarnalLink"].AsInt() == 0 ? "" : Request.Form["drpExtarnalLink"];
        Pages.Menu = Request.Form["drpMainMenu"].AsInt();
        Pages.FormID = Request.Form["drpFormMenu"].AsInt();
        Pages.ModuleID = Request.Form["drpModule"].AsInt();
        Pages.ControlParameter = Request.Form["txtControlParameter"];
        Pages.ShowHeaderTopMenu = (Request.Form["chckShowHeaderTopMenu"] != null && Request.Form["chckShowHeaderTopMenu"] == "on" ? true : false);
        Pages.ShowHeaderMenu = (Request.Form["chckShowHeaderMenu"] != null && Request.Form["chckShowHeaderMenu"] == "on" ? true : false);
        Pages.ShowFooterMenu = (Request.Form["chckShowFooterMenu"] != null && Request.Form["chckShowFooterMenu"] == "on" ? true : false);
        Pages.PhotoGaleries = Request.Form["lstPhotoGalery"];
        Pages.VideoGaleries = "";//Request.Form["lstVideoGalery"];
        Pages.DocumentGaleries = "";//Request.Form["lstDocGalery"];
        Pages.Target = Request.Form["drpPageTarget"];
        Pages.PageType = Convert.ToByte(Request.Form["drpPageType"]);
        Pages.rel = Request.Form["txtRel"];
        Pages.Lang = Request.Form["drpLang"].AsInt();
        Pages.Status = (Request.Form["drpPageStatus"] == "1" ? true : false);
        Pages.ShowBoxModel = false; //(Request.Form["drpShowBoxModel"] == "0" ? false : true);
        if (!Request.Form["txtRawUrl"].IsEmpty())
        {
            if (Request.Form["txtRawUrl"].StartsWith("http"))
            {
                Pages.RawUrl = Request.Form["txtRawUrl"];
            }
            else
            {
                Pages.RawUrl = Request.Form["txtRawUrl"].ConvertToUrl();
            }
        }
        else
        {
            Pages.RawUrl = Request.Form["txtDisplayName"].ConvertToUrl();
        }
        int ConnStatus = 0;
        if (Request.QueryString["ID"].IsInt() || Request.QueryString["HistoryID"].IsInt())
        {
            ConnXml.Entry(Pages).State = System.Data.EntityState.Modified;
            ConnStatus = ConnXml.SaveChanges();
        }
        else
        {
            ConnXml.Pages.Add(Pages);
            ConnStatus = ConnXml.SaveChanges();
            backup = Pages.Cast<PagesHistory>();
            Pages reqPageUpdate = ConnXml.Pages.FirstOrDefault(x => x.PageID == Pages.PageID);
            string strPageFormat = Shared.PageTypeUrl[reqPageUpdate.PageType];
            reqPageUpdate.LinkUrl = strPageFormat + "/" + Pages.PageID + "?lang=" + Pages.Lang;
            ConnXml.Entry(reqPageUpdate).State = System.Data.EntityState.Modified;
            ConnStatus = ConnXml.SaveChanges();
        }
        if (ConnStatus > 0)
        {
            backup.HistoryCreateDate = DateTime.Now;
            Session["Ok"] = "İşlem başarı ile gerçekleşmiştir.";
            ConnXml.PagesHistory.Add(backup);
            ConnStatus = ConnXml.SaveChanges();
        }
        else
        {
            Session["Error"] = "Bir problem oldu yönetici ile görüşün.";
        }
        Response.Redirect("Pages");
    }
}
@functions
{
    public List<SelectListItem> GetSubPage(int i, List<Pages> Pages, int getPageID)
    {
        string left = new string('-', i * 3);
        List<SelectListItem> lst = new List<SelectListItem>();
        foreach (Pages itemPages in Pages.Where(x => x.ParentID == getPageID))
        {
            lst.Add(new SelectListItem { Value = itemPages.PageID.ToString(), Text = left + " " + itemPages.DisplayName });
            lst.AddRange(GetSubPage(i + 1, Pages, itemPages.PageID));
        }
        return lst;
    }
}
@section head{
  
}
<div class="Title">@Html.Raw(txtPageTitlee)</div>
<form method="post" enctype="multipart/form-data">
    @AntiForgery.GetHtml()
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
    <div id="EditPageContent">
        <div class="Content">
            <div class="Item">
                @{
                    List<SelectListItem> lst = new List<SelectListItem>();
                    lst.Add(new SelectListItem { Value = "0", Text = "En üst kategori" });
                    lst.AddRange(GetSubPage(0, ConnXml.Pages.ToList(), 0));
                    lst.FirstOrDefault(x => x.Value == drpParentID).Selected = true;
                    IEnumerable<SelectListItem> drpParentItems = lst;
                }
                @HelperAdminControl.DropDownList("drpParentID", "Üst Kategori", drpParentItems)
                @HelperAdminControl.inputText("txtDisplayName", "Görünen Ad", false, true, txtDisplayName)
                @HelperAdminControl.inputText("txtSubTitle", "Alt Başlık", false, false, txtSubTitle)
                @HelperAdminControl.inputText("txtPageTitle", "Sayfa Başlığı", false, true, txtPageTitle)
                @HelperAdminControl.inputText("txtRawUrl", "Sayfa Url (örn:find-a-doctor)", false, true, txtRawUrl)
                @HelperAdminControl.inputText("txtKeywords", "Meta Anahtar Kelime", false, false, txtKeywords)
                @HelperAdminControl.inputText("txtDescription", "Meta Açıklama", false, false, txtDescription)
                @HelperAdminControl.inputText("txtShortContent", "Sayfa Kısa Açıklama", true, false, txtShortContent)
                @HelperAdminControl.inputEditor("txtContent", "Sayfa İçeriği", txtContent)
                @HelperAdminControl.fileUpload("fuImageUrl", "Resim")
                @Html.Raw(fuImageUrl)
                @{
                    drpParentItems.FirstOrDefault(x => x.Value == "0").Text = "Yönlendirme Kullanma";
                    drpParentItems.FirstOrDefault(x => x.Value == drpParentID).Selected = false;
                    drpParentItems.FirstOrDefault(x => x.Value == drpMainMenu).Selected = false;
                    drpParentItems.FirstOrDefault(x => x.Value == drpExtarnalLink).Selected = true;
                }
                @HelperAdminControl.DropDownList("drpExtarnalLink", "Şuraya Yönlendir (Öncelikli)", drpParentItems)
                @HelperAdminControl.inputText("txtExternalUrl", "Dış Sayfa Url", false, false, txtExternalUrl)
                @{
                    drpParentItems.FirstOrDefault(x => x.Value == "0").Text = "Kendi Menüsünü Göster";
                    drpParentItems.FirstOrDefault(x => x.Value == drpParentID).Selected = false;
                    drpParentItems.FirstOrDefault(x => x.Value == drpExtarnalLink).Selected = false;
                    drpParentItems.FirstOrDefault(x => x.Value == drpMainMenu).Selected = true;
                }
                @HelperAdminControl.DropDownList("drpMainMenu", "Bu sayfada şu menüyü göster", drpParentItems)
                @{
                    List<SelectListItem> lstForm = new List<SelectListItem>();
                    lstForm.Add(new SelectListItem { Value = "0", Text = "Form Kullanma" });
                    lstForm.AddRange(ConnXml.Form.ToList().Select(x => new SelectListItem { Value = x.FormID.ToString(), Text = x.FormName, Selected = (x.FormID == drpFormMenu.AsInt() ? true : false) }));
                    IEnumerable<SelectListItem> drpFormsItem = lstForm;
                    if (drpFormMenu != "0")
                    {
                        drpFormsItem.FirstOrDefault(x => x.Value == drpFormMenu).Selected = true;
                    }
                }
                @HelperAdminControl.DropDownList("drpFormMenu", "Sayfayla entegre çalışacak form", drpFormsItem)
                @{
                    List<SelectListItem> lstModule = new List<SelectListItem>();
                    lstModule.Add(new SelectListItem { Value = "0", Text = "Modül Kullanma" });
                    lstModule.AddRange(ConnXml.Module.ToList().Select(x => new SelectListItem { Value = x.ModuleID.ToString(), Text = x.ModuleName, Selected = (x.ModuleID == drpModule.AsInt() ? true : false) }));
                    IEnumerable<SelectListItem> drpModuleItem = lstModule;
                    if (drpModule != "0")
                    {
                        drpModuleItem.FirstOrDefault(x => x.Value == drpModule).Selected = true;
                    }
                }
                @HelperAdminControl.DropDownList("drpModule", "Sayfayla entegre çalışacak modul", drpModuleItem)
                @HelperAdminControl.inputText("txtControlParameter", "Modül/Form Parametresi", false, false, txtControlParameter)
                @{
                    List<SelectListItem> lstFAQ = new List<SelectListItem>();
                    lstFAQ.Add(new SelectListItem { Value = "0", Text = "SSS Kullanma" });
                    lstFAQ.AddRange(ConnXml.FAQCategory.ToList().Select(x => new SelectListItem { Value = x.FAQCategoryID.ToString(), Text = x.Title, Selected = (x.FAQCategoryID == drpFAQCategoryID.AsInt() ? true : false) }));
                    lstFAQ.FirstOrDefault(x => x.Value == drpFAQCategoryID).Selected = true;
                    IEnumerable<SelectListItem> drpFAQCategoryItems = lstFAQ;
                }
                @HelperAdminControl.DropDownList("drpFAQCatergoryID", "SSS Kategorisi", drpFAQCategoryItems)
                <div class="Title">Sayfayı şuralarda göster</div>
                <div class="Input">
                    @HelperAdminControl.CheckBox("chckShowHeaderTopMenu", "Üst Menüde göster", @chckShowHeaderTopMenu.AsBool())
                    <br />
                    @HelperAdminControl.CheckBox("chckShowHeaderMenu", "Ana Menüde göster", @chckShowHeaderMenu.AsBool())
                    <br />
                    @HelperAdminControl.CheckBox("chckShowFooterMenu", "Alt Menüde göster", @chckShowFooterMenu.AsBool())
                    <br />
                </div>
                @{
                    List<SelectListItem> lstPhotoGaleryItem = new List<SelectListItem>();
                    lstPhotoGaleryItem.Add(new SelectListItem { Value = "0", Text = "Fotoğraf Galerisi ile İlişkilendirme", Selected = (lstPhotoGalery == "0" ? true : false) });
                    lstPhotoGaleryItem.AddRange(ConnXml.PhotoGalery.ToList().Select(x => new SelectListItem { Value = x.PhotoGaleryID.ToString(), Text = x.Name, Selected = (x.PhotoGaleryID == lstPhotoGalery.AsInt() ? true : false) }));
                    IEnumerable<SelectListItem> drpPhotoGalerys = lstPhotoGaleryItem;
                }
                @HelperAdminControl.ListBox("lstPhotoGalery", "Fotoğraf galerisi ile ilişkilendir", drpPhotoGalerys)
                @*
                    @{
                        List<SelectListItem> lstVideoGaleryItem = new List<SelectListItem>();
                        lstVideoGaleryItem.Add(new SelectListItem { Value = "0", Text = "Video Galerisi ile İlişkilendirme", Selected = (lstVideoGalery == "0" ? true : false) });
                        lstVideoGaleryItem.AddRange(ConnXml.VideoGalery.ToList().Select(x => new SelectListItem { Value = x.VideoGaleryID.ToString(), Text = x.Name, Selected = (x.VideoGaleryID == lstVideoGalery.AsInt() ? true : false) }));
                        IEnumerable<SelectListItem> drpVideoGalerys = lstVideoGaleryItem;
                    }
                    @HelperAdminControl.ListBox("lstVideoGalery", "Video galerisi ile ilişkilendir", drpVideoGalerys)
                *@
                @*
                    @{
                        List<SelectListItem> lstDocGaleryItem = new List<SelectListItem>();
                        lstDocGaleryItem.Add(new SelectListItem { Value = "0", Text = "Döküman Galerisi ile İlişkilendirme", Selected = (lstDocGalery == "0" ? true : false) });
                        lstDocGaleryItem.AddRange(ConnXml.DocumentGalery.ToList().Select(x => new SelectListItem { Value = x.DocumentGaleryID.ToString(), Text = x.Name, Selected = (x.DocumentGaleryID == lstDocGalery.AsInt() ? true : false) }));
                        IEnumerable<SelectListItem> drpDocGalerys = lstDocGaleryItem;
                    }
                    @HelperAdminControl.ListBox("lstDocGalery", "Döküman galerisi ile ilişkilendir", drpDocGalerys)
                *@
                @{
                    List<SelectListItem> lstTarget = new List<SelectListItem>();
                    lstTarget.Add(new SelectListItem { Value = "_self", Text = "Aynı pencerede - _self" });
                    lstTarget.Add(new SelectListItem { Value = "_blank", Text = "Farklı pencerede - _blank" });
                    lstTarget.FirstOrDefault(x => x.Value == drpPageTarget).Selected = true;
                    IEnumerable<SelectListItem> drplstTarget = lstTarget;
                }
                @HelperAdminControl.DropDownList("drpPageTarget", "Sayfa hedefi", drplstTarget)
                @*
                    <div class="Title">Kutu Modelinde Ara sayfa olarak kullan (Evet derseniz alt sayfaların linkleri ve küçük resimleri listelenir)</div>
                        <div class="Input">
                        @{
                            string BoxModelFalse = "";
                            string BoxModelTrue = "";
                            if (!drpShowBoxModel)
                            {
                                BoxModelFalse = "checked='checked'";
                            }
                            else
                            {
                                BoxModelTrue = "checked='checked'";
                            }
                        }
                        <input type="radio" id="drpShowBoxModel0" name="drpShowBoxModel" value="0" @BoxModelFalse><label for="drpShowBoxModel0">Pasif</label>
                        <input type="radio" id="drpShowBoxModel1" name="drpShowBoxModel" value="1" @BoxModelTrue><label for="drpShowBoxModel1">Aktif</label>
                    </div>
                *@
                @{
                    List<SelectListItem> lstPageType = new List<SelectListItem>();
                    for (int i = 0; i < Shared.PageType.Length; i++)
                    {
                        lstPageType.Add(new SelectListItem { Value = i.ToString(), Text = Shared.PageType[i] });
                    }
                    lstPageType.FirstOrDefault(x => x.Value == drpPageType).Selected = true;
                    IEnumerable<SelectListItem> drpPageTypes = lstPageType;
                }
                @HelperAdminControl.DropDownList("drpPageType", "Sayfa Şablonu", drpPageTypes)
                @HelperAdminControl.inputText("txtRel", "Rel (özel durumlar)", false, false, txtRel)
                @{
                    List<SelectListItem> lstLang = new List<SelectListItem>();
                    for (int i = 0; i < Shared.Lang.Length; i++)
                    {
                        lstLang.Add(new SelectListItem { Value = i.ToString(), Text = Shared.toLang(i) });
                    }
                    lstLang.FirstOrDefault(x => x.Value == drpLang).Selected = true;
                    IEnumerable<SelectListItem> drplstLangs = lstLang;
                }
                @HelperAdminControl.DropDownList("drpLang", "Dil", drplstLangs)
                <div class="Title">Durum</div>
                <div class="Input">
                    @{
                        string StatusFalse = "";
                        string StatusTrue = "";
                        if (!drpPageStatus)
                        {
                            StatusFalse = "checked='checked'";
                        }
                        else
                        {
                            StatusTrue = "checked='checked'";
                        }
                    }
                    <input type="radio" id="drpPageStatus0" name="drpPageStatus" value="0" @StatusFalse><label for="drpPageStatus0">Pasif</label>
                    <input type="radio" id="drpPageStatus1" name="drpPageStatus" value="1" @StatusTrue><label for="drpPageStatus1">Aktif</label>
                </div>
                <div class="ButtonPanel">
                    <input id="btnSave" name="btnSave" type="submit" class="inputbutton Add" value="@Html.Raw(btnName)" />
                </div>
            </div>
        </div>
    </div>
</form>