@{
    Layout = "_Admin.cshtml";
    Login AdminLogin = new Login();
    MvcXmlEntities ConnXml = new MvcXmlEntities();
    Setting Setting = ConnXml.Setting.FirstOrDefault();
    #region Değişkenler
    var fuImageUrl = "";
    var txtContent = "";
    var txtUrl = "";
    var drpPageTarget = "_self";
    var drpLang = "0";
    bool drpPageStatus = true;
    var txtYoutubeVideoCode = "";
    var btnName = "Kaydet";
    var txtPageTitle = "Yeni Banner Ekle";
    #endregion
    if (Request.QueryString["Lang"] != null)
    {
        drpLang = Request.QueryString["Lang"];
    }
    if (Request.QueryString["Delete"].IsInt())
    {
        int reqID = Request.QueryString["Delete"].AsInt();
        Banner Pages = ConnXml.Banner.FirstOrDefault(x => x.BannerID == reqID);
        string imgDir = "~/" + Setting.Documentdir + "/Banner/" + Pages.ImageUrl;
        if (System.IO.File.Exists(Server.MapPath(imgDir)) && !Pages.ImageUrl.IsEmpty())
        {
            System.IO.File.Delete(Server.MapPath(imgDir));
        }
        ConnXml.Entry(Pages).State = System.Data.EntityState.Deleted;
        int ConnStatus = 0;
        ConnStatus = ConnXml.SaveChanges();
        if (ConnStatus > 0)
        {
            Session["Ok"] = "İşlem başarı ile gerçekleşmiştir.";
        }
        else
        {
            Session["Error"] = "Bir problem oldu yönetici ile görüşün.";
        }
        Response.Redirect("BannerPage");
    }
    if (Request.QueryString["ID"].IsInt() || Request.QueryString["Reference"].IsInt() || Request.QueryString["HistoryID"].IsInt())
    {
        int reqID = (Request.QueryString["ID"].AsInt() != 0 ? Request.QueryString["ID"].AsInt() : Request.QueryString["Reference"].AsInt());
        int historyID = (Request.QueryString["HistoryID"].AsInt());
        Banner reqPage = new Banner();
        if (reqID > 0)
        {
            reqPage = ConnXml.Banner.FirstOrDefault(x => x.BannerID == reqID);
        }
        else if (historyID > 0)
        {
            reqPage = ConnXml.BannerHistory.FirstOrDefault(x => x.BannerHistoryID == historyID).Cast<Banner>();
            btnName = "Geçmişe Dön";
            txtPageTitle = reqPage.Title + " adlı menü'nün " + reqPage.ModifiedDate + " tarihinde kaydedilen versiyonu. (Geçmişe dönmeden düzenleme yapamazsınız)";
        }
        if (!reqPage.ImageUrl.IsEmpty())
        {
            string imgDir = "~/" + Setting.Documentdir + "/Banner/" + reqPage.ImageUrl;
            if (System.IO.File.Exists(Server.MapPath(imgDir)))
            {
                fuImageUrl = "<div class=\"Input\"><span>(<a href='" + imgDir.Replace("~/", "../") + "' target='_blank'>Mevcut resim</a> - <a class='DeleteFile' rel='" + reqPage.BannerID + "'  type='BannerImageUrl' href='javascript:void(0)' target='_blank'>Resmi veya Video Sil</a>)</span></div>";
            }
        }
        txtContent = reqPage.Body;
        txtUrl = reqPage.Url;
        txtYoutubeVideoCode = reqPage.YoutubeVideoCode;
        drpPageTarget = reqPage.Target;
        drpLang = reqPage.Lang.ToString();
        drpPageStatus = reqPage.Status;
    }
    if (IsPost)
    {
        if (!AdminLogin.IsLogin())
        {
            Response.Redirect(Shared.PageBasePath() + "Govern/Login");
        }
        // AntiForgery.Validate();
        Banner itemPages = new Banner();
        BannerHistory backup = new BannerHistory();
        if (Request.QueryString["ID"].IsInt() || Request.QueryString["Reference"].IsInt() || Request.QueryString["HistoryID"].IsInt())
        {
            int reqID = (Request.QueryString["ID"].AsInt() != 0 ? Request.QueryString["ID"].AsInt() : Request.QueryString["Reference"].AsInt());
            int historyID = (Request.QueryString["HistoryID"].AsInt());
            if (reqID > 0)
            {
                itemPages = ConnXml.Banner.FirstOrDefault(x => x.BannerID == reqID);
                backup = itemPages.Cast<BannerHistory>();
            }
            else if (historyID > 0)
            {
                itemPages = ConnXml.BannerHistory.FirstOrDefault(x => x.BannerHistoryID == historyID).Cast<Banner>();
                backup = itemPages.Cast<BannerHistory>();
            }
            itemPages.ModifiedDate = DateTime.Now;
            itemPages.ModifiedId = AdminLogin.LoginUserID();
            backup.ModifiedId = AdminLogin.LoginUserID();
        }
        else
        {
            itemPages.CreatedDate = DateTime.Now;
            itemPages.ModifiedDate = DateTime.Now;
            itemPages.CreatedId = AdminLogin.LoginUserID();
            itemPages.ImageUrl = "";
        }
        if (Request.Files.Count > 0)
        {
            var uploadedFile = Request.Files["fuImageUrl"];
            if (uploadedFile.ContentLength > 0)
            {
                if (!itemPages.ImageUrl.IsEmpty())
                {
                    string imgDir = "~/" + Setting.Documentdir + "/Banner/" + itemPages.ImageUrl;
                    System.IO.File.Delete(Server.MapPath(imgDir));
                }
                string getExtentions = Path.GetExtension(uploadedFile.FileName);
                string newFileName = System.Guid.NewGuid().ToString() + getExtentions;
                var fileSavePath = Server.MapPath("~/" + Setting.Documentdir + "/Banner/" + newFileName);
                uploadedFile.SaveAs(fileSavePath);
                itemPages.ImageUrl = newFileName;
            }
        }
        itemPages.PageID = Request.Form["drpPageID"].AsInt();
        itemPages.Url = Request.Form["txtUrl"];
        itemPages.YoutubeVideoCode = Request.Form["txtYoutubeVideoCode"];
        itemPages.Target = Request.Form["drpPageTarget"];
        itemPages.Lang = Request.Form["drpLang"].AsInt();
        itemPages.Line = 0;
        itemPages.Status = (Request.Form["drpPageStatus"] == "1" ? true : false);
        itemPages.Body = Request.Unvalidated().Form["txtContent"];
        int ConnStatus = 0;
        if (Request.QueryString["ID"].IsInt() || Request.QueryString["HistoryID"].IsInt())
        {
            ConnXml.Entry(itemPages).State = System.Data.EntityState.Modified;
            ConnStatus = ConnXml.SaveChanges();
        }
        else
        {
            ConnXml.Banner.Add(itemPages);
            ConnStatus = ConnXml.SaveChanges();
            backup = itemPages.Cast<BannerHistory>();
        }
        if (ConnStatus > 0)
        {
            backup.HistoryCreateDate = DateTime.Now;
            Session["Ok"] = "İşlem başarı ile gerçekleşmiştir.";
            ConnXml.BannerHistory.Add(backup);
            ConnStatus = ConnXml.SaveChanges();
        }
        else
        {
            Session["Error"] = "Bir problem oldu yönetici ile görüşün.";
        }
        Response.Redirect("BannerPage");
    }
}
<div class="Title">@Html.Raw(txtPageTitle)</div>
<form method="post" enctype="multipart/form-data">
    @AntiForgery.GetHtml()
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
    <div id="EditPageContent">
        <div class="Content">
            <div class="Item">
                @HelperAdminControl.fileUpload("fuImageUrl", "Resim")
                @Html.Raw(fuImageUrl)
                @HelperAdminControl.inputEditor("txtContent", "Sayfa İçeriği", txtContent)
                @HelperAdminControl.inputText("txtUrl", "Dış Sayfa Url", false, false, txtUrl)
                @HelperAdminControl.inputText("txtYoutubeVideoCode", "YouTube Kodu", false, false, txtYoutubeVideoCode)
                @{
                    List<SelectListItem> lstPageTarget = new List<SelectListItem>();
                    lstPageTarget.Add(new SelectListItem { Value = "_self", Text = "Aynı pencerede - _self" });
                    lstPageTarget.Add(new SelectListItem { Value = "_blank", Text = "Farklı pencerede - _blank" });
                    lstPageTarget.FirstOrDefault(x => x.Value == drpPageTarget).Selected = true;
                    IEnumerable<SelectListItem> drpPageTargets = lstPageTarget;
                }
                @HelperAdminControl.DropDownList("drpPageTarget", "Sayfa hedefi", drpPageTargets)
                @{
                    List<SelectListItem> lstLang = new List<SelectListItem>();
                    for (int i = 0; i < Shared.Lang.Length; i++)
                    {
                        lstLang.Add(new SelectListItem { Value = i.ToString(), Text = Shared.toLang(i) });
                    }
                    lstLang.FirstOrDefault(x => x.Value == drpLang).Selected = true;
                    IEnumerable<SelectListItem> drplstLangs = lstLang;
                }
                @HelperAdminControl.DropDownList("drpLang", "Dil", drplstLangs)
                <div class="Title">Durum</div>
                <div class="Input">
                    @{
                        string StatusFalse = "";
                        string StatusTrue = "";
                        if (!drpPageStatus)
                        {
                            StatusFalse = "checked='checked'";
                        }
                        else
                        {
                            StatusTrue = "checked='checked'";
                        }
                    }
                    <input type="radio" id="drpPageStatus0" name="drpPageStatus" value="0" @StatusFalse><label for="drpPageStatus0">Pasif</label>
                    <input type="radio" id="drpPageStatus1" name="drpPageStatus" value="1" @StatusTrue><label for="drpPageStatus1">Aktif</label>
                </div>
                <div class="ButtonPanel">
                    <input id="btnSave" name="btnSave" type="submit" class="inputbutton Add" value="@Html.Raw(btnName)" />
                </div>
            </div>
        </div>
    </div>
</form>